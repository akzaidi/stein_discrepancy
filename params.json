{"name":"Stein Discrepancy","tagline":"A practical tool for quantifying how well a sample approximates a target distribution","body":"## What is this so-called Stein Discrepancy?\r\n\r\nTo improve the efficiency of Monte Carlo estimation, practitioners are\r\nturning to biased Markov chain Monte Carlo procedures that trade off\r\nasymptotic exactness for computational speed. The reasoning is sound: a\r\nreduction in variance due to more rapid sampling can outweigh the bias\r\nintroduced. However, the inexactness creates new challenges for sampler and\r\nparameter selection, since standard measures of sample quality like\r\neffective sample size do not account for asymptotic bias. To address these\r\nchallenges, we introduce a new computable quality measure that quantifies\r\nthe maximum discrepancy between sample and target expectations over a large\r\nclass of test functions. This measure is what we are calling the\r\nStein discrepancy.\r\n\r\nFor a more detailed explanation, take a peek at the original paper:\r\n\r\n[Measuring Sample Quality with Stein's Method](http://arxiv.org/abs/1506.03039)\r\n\r\n## So how do I use it?\r\n\r\nComputing the vanilla Stein discrepancy requires solving a linear program (LP), and\r\nthus you'll need some kind of LP solver installed to use this\r\nsoftware. We use JuMP to interface with these solvers; any of the supported\r\nLP solvers with do just fine.\r\n\r\nAssuming you have an LP solver installed, computing our measure is easy.\r\nFirst, you must have a target distribution in mind. Because we must use\r\ninformation about that distribution's log density and its gradients, we\r\nencode this information in the subclass of a `SteinDistribution`. If your\r\ndesired distribution isn't available as one of the distributions found in\r\nthe src/distributions folder, feel free to roll your own.\r\n\r\nOnce you have this target in hand, the rest is easy. Here's a quick example:\r\n\r\n```\r\n# do the necessary imports\r\nusing SteinDistributions: SteinUniform\r\nusing SteinDiscrepancy: stein_discrepancy\r\n# creates a uniform distribution on [0,1]^2\r\ntarget = SteinUniform(2)\r\n# generates 100 points\r\nX = rand(target, 100)\r\n# can be a string or a JuMP solver\r\nsolver = \"clp\"\r\nresult = stein_discrepancy(points=X, target=target, solver=solver)\r\ndiscrepancy = vec(result.objective_value)\r\n```\r\n\r\nThe variable `discrepancy` here will encode the Stein discrepancy along each\r\ndimension. The final discrepancy is just the sum of this vector.\r\n\r\n## Summary of the Code\r\n\r\nAll code is available in the src directory of the repo. Many examples\r\ncomputing the stein_discrepancy are in the src/experiments directory\r\n(the experiment sample_target_mismatch-multivariate_uniform_vs_beta\r\nis a good first one to examine).\r\n\r\nMake sure to include startup.jl so all the paths are properly set up.\r\nTo do so, after opening the julia REPL, enter `include(\"src/startup.jl\")`\r\nat the command prompt.\r\n\r\n### Contents of src\r\n\r\n* startup.jl - Adds project module locations to LOAD_PATH\r\n* discrepancy - Code for computing Stein discrepancy\r\n* distributions - Types representing probability distributions\r\n* experiments - Code for running experiments\r\n* samplers - Code implementing the samplers of study\r\n* visualization - R scripts to create visualizations for the results\r\n\r\n### Conventions\r\n\r\n* Use lowercase file names (with underscores if needed for clarity) for scripts\r\n* Use camel case with initial capital letter for defining types and modules\r\n* Use lowercase (with underscores if needed for clarity) for variables and\r\n  functions (unless there are other prevailing conventions like X representing\r\n  a data matrix)\r\n\r\n### Compiling Code in discrepancy/spanner directory\r\n\r\nThe code should be compiled when startup.jl is first invoked. However,\r\nif this doesn't work for some reason, here's all you need to know for compiling\r\nthe code in discrepancy/spanner:\r\n\r\n```\r\ncd discrepancy/spanner\r\nmake\r\nmake clean\r\n```\r\n\r\nThe last step isn't necessary, but it will remove some superfluous\r\nfiles. If you want to kill everything made in the build process, just run\r\n\r\n```\r\nmake distclean\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}